#!/bin/bash

DEBUG_MODE=0
declare TMP_FOLDER=/tmp/bbque/bpl

BPL_FOLDER="@CONFIG_BOSP_RUNTIME_PATH@/etc/bbque/pil"
TARGET_SYS="$BPL_FOLDER/`hostname`.xml"
TARGET_GLOBAL="$BPL_FOLDER/systems.xml"

################################################################################
# From here below, please, do not change anything!
################################################################################

# To kill something at the end, if needed
declare PID=""

# Used to store checklist results
declare DIALOG_TEMP_FILE=$TMP_FOLDER/dialog

# Used to store the system id number
declare DIALOG_SYSTEM_ID=$TMP_FOLDER/dialog_sysid

# Cache used to define Barbeque CPUs.
# A Barbeque CPU is a set of Processing Elements sharing a cache of that level
declare PARTITION_CACHE_LEVEL="L3Cache"

# Processing elements used to host Linux
declare HOST_PES=""
# Processing elements used to run managed applications
declare MDEV_PES=""

DIALOGRC=/tmp/dialog.rc

################################################################################
# FUNCTIONS
################################################################################

function PopulateDebugLog {
	if [[ $DEBUG_MODE == 1 ]]; then
		echo "# $@." >> $TMP_FOLDER/debug.log
	fi
}

function CloseGenerator {
	if [[ $DEBUG_MODE == 1 ]]; then
		rm $TMP_FOLDER/* &> /dev/null
		rmdir $TMP_FOLDER/* &> /dev/null
	fi
	kill -9 $PID &> /dev/null
	exit
}

function CheckPackage {
	HAVE_PACKAGE=$($1 --version 2> /dev/null)
	if [ "$HAVE_PACKAGE" == "" ]; then
		echo "ERROR: '$1' package missing. Please install it from repositories"
		exit
	fi
	PopulateDebugLog "[CheckPackage $1] $HAVE_PACKAGE"
}

function GreetingBanner {
	dialog --title 'Welcome' \
--msgbox 'Welcome to the BarbequeRTRM platform layout generator. This script
will guide you through the process of layout generation, whose
output is an xml file.

This script relies on lstopo and dialog packages to work. If you
are reading this prompt, such packages are installed on your
system. Please note that lstopo output may differ from a system
to another; if you find bugs, they are probably due to lstopo.
In that case, please run the script in debug mode by setting
DEBUG_MODE=1 on line one and send me the output.

Enjoy! [contacts: simone.libutti@polimi.it]

Press enter to create your own platform layout!' 20 70; clear
}


function SystemIdInput {
dialog --clear --title "System" --inputbox "System ID number (sys*)" \
	10 70 0 2> $DIALOG_SYSTEM_ID
	if [ `cat $DIALOG_SYSTEM_ID` -eq `cat $DIALOG_SYSTEM_ID` ]; then
		echo "Fine."
	else
		echo 0 > $DIALOG_SYSTEM_ID
	fi
}

function CacheSelection {
dialog --clear --title "Chosing the partition" \
        --menu "Choose how your CPU resources will be partitioned:" 20 70 2 \
        "L2"  "Processing elements that share the L2 cache" \
        "L3" "Processing elements that share the L3 cache"  2> $DIALOG_TEMP_FILE
	clear

	SELECTED_CACHE=$(cat $DIALOG_TEMP_FILE)
	rm $DIALOG_TEMP_FILE

	case $SELECTED_CACHE in
		"L2")	PARTITION_CACHE_LEVEL="L2Cache" ;;
		"L3")	PARTITION_CACHE_LEVEL="L3Cache" ;;
		   *)	echo "No choice taken. Aborting"
				CloseGenerator;;
	esac

	PopulateDebugLog "Partition cache level: $PARTITION_CACHE_LEVEL"
}

function Setup {
	mkdir -p $TMP_FOLDER
	rm $TMP_FOLDER/* &> /dev/null

	lstopo -v --no-bridges --no-icaches | \
		grep -v "Machine\|L1dCache" | \
		awk '{if($1 == "depth") exit; print $0}' > $TMP_FOLDER/lstopo_description

	lstopo -v --no-io --no-bridges --no-icaches | \
		head -n1 > $TMP_FOLDER/machine_description

	lstopo --no-io --no-bridges --no-caches -v | \
		grep -v "Machine" | grep "PU.*L#" | grep -o "P#[0-9]\{1,\}" | \
		awk -F'#' '{print $2" proc_element_"$2" off"}' > $TMP_FOLDER/pes_list
}

function PrintTopology {

dialog --colors \
--msgbox 'BarbequeRTRM divides resources into `host` and `managed` partitions.
    * \ZbHost partition\ZB hosts the Operating System
    * \ZbManaged partition\ZB hosts integrated applications

You must choose which processing elements will act as \ZuHOST Partition\ZU.' \
15 70; clear

}

function SetHostPartition {

	lstopo --no-bridges --no-io &> /dev/null &
	PID=$PID" "$!

	OPTIONS=$(cat $TMP_FOLDER/pes_list)

	dialog --checklist "Select which PUs will HOST Linux" \
		20 75 15 $OPTIONS 2> $DIALOG_TEMP_FILE
	clear

	HOST_PES=$(cat $DIALOG_TEMP_FILE)

	if [ "$HOST_PES" == "" ]; then
		echo "No host device selected. Aborting."
		CloseGenerator
	fi
}

function SetManagedPartition {

	OPTIONS=$(cat $TMP_FOLDER/pes_list)

	dialog --checklist "Select which PUs will be used to run MANAGED applications" \
		20 75 15 $OPTIONS 2> $DIALOG_TEMP_FILE

	MDEV_PES=$(cat $DIALOG_TEMP_FILE)

	if [ "$HOST_PES" == "" ]; then
		echo "No managed device selected. Aborting."
		CloseGenerator
	fi
}

function XML_GetStorageDeviceType {
	TYPES=(HDD SSD)
		if [ -e /sys/block/$name/queue/rotational ]; then
			if [ $(cat /sys/block/$name/queue/rotational) -eq 0 ]; then
				TYPE=${TYPES[1]}
			else
				TYPE=${TYPES[0]}
			fi
		else
			dialog --radiolist "It was not possible to automatically detect the type of disk. Select it manually" \
				20 75 15 \
				1 HDD on \
				2 SSD off 2> $DIALOG_TEMP_FILE
			clear
			SELECTED=$(cat $DIALOG_TEMP_FILE)
			TYPE=${TYPES[$(($SELECTED - 1))]}

			if [ "$SELECTED" == "" ]; then
				echo "No disk type selected. Aborting."
				CloseGenerator
			fi
		fi
}

function ReadTest {
	CURR_R_BW=$(sudo hdparm -t /dev/$name | awk 'NR==3 {print $11}')
	CURR_R_BW=${CURR_R_BW%.*}
	echo $CURR_R_BW >> ./$R_RES_FILE
	COUNT=$(($COUNT + 5))
}

function WriteTest {
	DD_OUT=$(dd if=/dev/zero of=./$TEMP_FILE bs=4k count=250k conv=fdatasync 2>&1 >/dev/null | awk 'NR==3{print $10, $11}')
	CURR_W_BW=$(echo $DD_OUT | awk '{print $1}' | tr ',' '.')
	if [[ "$(echo $DD_OUT | awk '{print $2}')" == "GB/s" ]]; then
		CURR_W_BW=$(echo "$CURR_W_BW * 1000" | bc -l)
	fi	
	CURR_W_BW=${CURR_W_BW%.*}
	echo $CURR_W_BW >> ./$W_RES_FILE
	COUNT=$(($COUNT + 5))
}

function Compute_Avg_Variance {
	cat ./$TEMP_FILE | awk '{
 		sum = $1;       
  		for (n=2; n <= NF; n++) { 
    		sum += $n;              
  		}
		avg = sum/NF;
		
		sum = ($1 - avg) * ($1 - avg);
		for (n=2; n <= NF; n++) {
			sum += ($n - avg) * ($n - avg);
		}
		var = sum/(NF-1);
  		print avg " " var
	}' > ./$RES_FILE
	cat ./$RES_FILE >> logfile
}

function XML_TestReadWriteBW {
    NUM_ITERS=10
	TEMP_FILE=tempfile
	R_RES_FILE=r_resfile
	W_RES_FILE=w_resfile
	RES_FILE=resfile
	R_BW=0
	W_BW=0

	dialog --title "Storage Bandwidth Test" --colors --msgbox \
	'A read/write bandwidth test will now be executed on the storage device '"$name"'.
	It may take several minutes, depending on the actual bandwidth of the device.
	Press OK to start the test.' 15 70;

	COUNT=0
	(
		for (( i = 1; i <= $NUM_ITERS; i++ ))
        do

		echo "XXX"
		echo "Read test n. $i"
		echo "XXX"
		echo $COUNT
		ReadTest

		echo "XXX"
    	echo "Write test n. $i"
    	echo "XXX"
		echo $COUNT
		WriteTest
		
        rm ./$TEMP_FILE
    	done
	) | dialog --title "Bandwidth Test" --gauge "Testing read and write bandwidth of the disk /dev/$name" 15 70 0;
	
	cat ./$R_RES_FILE | tr '\n' ' ' > ./$TEMP_FILE
	Compute_Avg_Variance
	R_BW=$(cat ./$RES_FILE | awk 'NR==1{print $1}')
	R_VAR=$(cat ./$RES_FILE | awk 'NR==1{print $2}')

	cat ./$W_RES_FILE | tr '\n' ' ' > ./$TEMP_FILE
	Compute_Avg_Variance
	W_BW=$(cat ./$RES_FILE | awk 'NR==1{print $1}')
	W_VAR=$(cat ./$RES_FILE | awk 'NR==1{print $2}')

	dialog --title "Summary" --colors --msgbox 'The following parameters were detected.
    * \ZbRead Bandwidth\ZB: '"$R_BW"' MB/s, variance: '"$R_VAR"'
    * \ZbWrite Bandwidth\ZB: '"$W_BW"' MB/s, variance: '"$W_VAR"'

	Press OK to exit.' 15 70;
	clear
	rm ./$R_RES_FILE
	rm ./$W_RES_FILE
	rm ./$RES_FILE
	rm ./$TEMP_FILE
}

function XML_GenStorageDevices {
	bbqid=0
	lsblk --output NAME,MAJ:MIN,SIZE,TYPE | grep disk | \
	while read i
	do
		name=`echo $i | awk '{ print $1 }'`
		devid=`echo $i | awk '{ print $2 }'`
		size=`echo $i | awk '{ print $3 }' | sed s/[A-Z]//g` # not used
		unit=`echo $i | awk '{ print $3 }' | sed s/[0-9]//g` # not used
		
		TYPE=""
		R_BW=100
		W_BW=100

		XML_GetStorageDeviceType
		XML_TestReadWriteBW

		echo "    <storage id=\"$bbqid\" dev=\"$devid\" name=\"$name\" quantity=\"$size\" unit=\"MB\" bw_unit=\"MB/s\" read_bandwidth=\"$R_BW\" write_bandwidth=\"$W_BW\" type=\"$TYPE\"/>" >> $TMP_FOLDER/xml_disks
		bbqid=`expr $bbqid + 1`
	done
}


function XML_WriteHead {
	echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > $TARGET_SYS
	echo "<system id=\""$SYSTEM_ID"\" hostname=\""$HOSTNAME"\" address=\""$MACHINE_IP"\">" >> $TARGET_SYS
}

function XML_WriteTail {
	echo "    </cpu>" >> $TARGET_SYS
	cat $TMP_FOLDER/xml_mems >> $TARGET_SYS
	cat $TMP_FOLDER/xml_netifs >> $TARGET_SYS
	cat $TMP_FOLDER/xml_disks >> $TARGET_SYS
	echo "</system>" >> $TARGET_SYS
}

function XML_PrintOutput {
	cat $TARGET_SYS
}

function PrintDebugLog {
	if [[ $DEBUG_MODE == 1 ]]; then
		echo "#####################################################################"
		echo "# DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG #"
		echo "#####################################################################"
		lstopo --no-io --no-bridges --no-caches -v > $TMP_FOLDER/debug_lstopo.log
		while read line; do echo "# "$line; done < $TMP_FOLDER/debug_lstopo.log
		echo "#####################################################################"
		cat $TMP_FOLDER/debug.log
		echo "#####################################################################"
		echo "# DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG #"
		echo "#####################################################################"
		echo -e "\n"
	fi
}


function XML_CreateSystems {
        echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > $TARGET_GLOBAL
        echo "<systems version=\"1.0\">" >> $TARGET_GLOBAL
        echo "    <include local=\"true\">"`hostname`".xml</include>" >> $TARGET_GLOBAL
        echo "</systems>" >> $TARGET_GLOBAL

}

################################################################################
# Check for args. Anyway, args are not needed.
################################################################################

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
	echo "Just run the script. No arguments."
	echo "To run in debug mode, change the first line to 'DEBUG_MODE=1'"
	exit
fi

################################################################################
# The generator
################################################################################

CheckPackage lstopo # Checking for needed packages
CheckPackage dialog # Checking for needed packages

Setup # Setting up temp files directory

GreetingBanner # Description and info
SystemIdInput  # Set the system ID number
SYSTEM_ID=$(cat $DIALOG_SYSTEM_ID)
CacheSelection # Cache partition selection

PrintTopology # Show the user the topology, so he chooses a host partition
SetHostPartition # Make the user choose a host partition
SetManagedPartition # Make the user choose a host partition

#MACHINE_IP=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
# Localhost (we are generating a system description for the local machine
MACHINE_IP=127.0.0.1 
PopulateDebugLog "IP of this machine: $MACHINE_IP"

HOSTNAME=$(hostname)
PopulateDebugLog "Hostname of this machine: $HOSTNAME"

ARCH=$(uname -m)
PopulateDebugLog "Architecture of this machine: $ARCH"

NUMA_NODES=$(cat $TMP_FOLDER/lstopo_description | grep NUMANode | wc -l)
PopulateDebugLog "Number NUMA nodes (0 means UMA): $NUMA_NODES"

UMA_INFO=$(cat $TMP_FOLDER/machine_description | head -n1 | \
	grep -o "local=[^\t]\{1,\}" | sed -e 's/local=//g')
PopulateDebugLog "Total RAM $UMA_INFO"

CURRENT_MEMORY_SIZE=$(echo $UMA_INFO | grep -o "[0-9]\{1,\}")
PopulateDebugLog " - RAM VALUE: $CURRENT_MEMORY_SIZE"

CURRENT_MEMORY_SIZE_UNIT=$(echo $UMA_INFO | grep -o "[^0-9]\{1,\}")
PopulateDebugLog " - UNIT: $CURRENT_MEMORY_SIZE_UNIT"

CURRENT_CPU_ID=-1
CURRENT_NUMA_NODE=0
CURRENT_SOCKET=0

# In case cache information is not exposed by the virtual fs
PARTITION_INFO_FOUND=0
DEFAULT_CPU_ID=0

XML_WriteHead # Write a part of the XML output on a file


# From now on, I refuse to stick to 80 columns width. Really.
while read lstopo_entry; do
	KEYWORD=$(echo $lstopo_entry | sed -e 's/Socket/Package/g' | sed -e 's/Network/Net/g' | awk '{print $1}')

	case $KEYWORD in
		"NUMANode")
			CURRENT_MEMORY_NODE=$(echo $lstopo_entry | grep -o "P#[0-9]\{1,\}" | grep -o "[0-9]\{1,\}")
			CURRENT_SOCKET=$(echo $lstopo_entry | grep -o "L#[0-9]\{1,\}" | grep -o "[0-9]\{1,\}")
			NUMA_INFO=$(echo $lstopo_entry | grep -o "local=[^\t]\{1,\}" | sed -e 's/local=//g')
			CURRENT_MEMORY_SIZE=$(echo $NUMA_INFO | grep -o "[0-9]\{1,\}")
			CURRENT_MEMORY_SIZE_UNIT=$(echo $NUMA_INFO | grep -o "[^0-9]\{1,\}")
			echo "    <mem id=\""$CURRENT_MEMORY_NODE"\" quantity=\""$CURRENT_MEMORY_SIZE"\" unit=\""$CURRENT_MEMORY_SIZE_UNIT"\"/>" >> $TMP_FOLDER/xml_mems
			PopulateDebugLog "    Found a NUMA node. ID: $CURRENT_MEMORY_NODE, size: $CURRENT_MEMORY_SIZE$CURRENT_MEMORY_SIZE_UNIT"
			;;
		"Package")
			if [ "$NUMA_NODES" == "0" ]; then
				CURRENT_MEMORY_NODE=$(echo $lstopo_entry | grep -o "L#[0-9]\{1,\}" | grep -o "[0-9]\{1,\}")
				echo "    <mem id=\""$CURRENT_MEMORY_NODE"\" quantity=\""$CURRENT_MEMORY_SIZE"\" unit=\""$CURRENT_MEMORY_SIZE_UNIT"\"/>" >> $TMP_FOLDER/xml_mems
				PopulateDebugLog "Found memory of a Socket. ID: $CURRENT_MEMORY_NODE, size: $CURRENT_MEMORY_SIZE$CURRENT_MEMORY_SIZE_UNIT"
			else
				PopulateDebugLog "Found memory of a Socket. Ignoring it (should have been found at NUMA node level)"
			fi
			;;
		"$PARTITION_CACHE_LEVEL")
			if [[ $CURRENT_CPU_ID -ge 0 ]]; then echo "    </cpu>" >> $TARGET_SYS; fi
			let CURRENT_CPU_ID++
			echo "    <cpu arch=\""$ARCH"\" id=\""$CURRENT_CPU_ID"\" socket_id=\""$CURRENT_SOCKET"\" mem_id=\""$CURRENT_MEMORY_NODE"\">" >> $TARGET_SYS
			PopulateDebugLog "Creating a new Barbeque CPU. arch: $ARCH, ID: $CURRENT_CPU_ID, socket_id: $CURRENT_SOCKET, mem_id: $CURRENT_MEMORY_NODE"
			PARTITION_INFO_FOUND=1
			;;
		"Core")
			CURRENT_CORE=$(echo $lstopo_entry | grep -o "P#[0-9]\{1,\}" | grep -o "[0-9]\{1,\}")
			PopulateDebugLog "Found a core. Multiple PUs in this core would mean hyper-threading. ID: $CURRENT_CORE"
			;;
		"PU")
			PARTITION="none"
			CURRENT_PE=$(echo $lstopo_entry | grep -o "P#[0-9]\{1,\}" | grep -o "[0-9]\{1,\}")
			for PE in `echo $HOST_PES | sed -e 's/"//g'`; do
				if [ "$PE" == "$CURRENT_PE" ]; then
					PARTITION="host"
				fi
			done
			for PE in `echo $MDEV_PES | sed -e 's/"//g'`; do
				if [ "$PE" == "$CURRENT_PE" ]; then
					if [ "$PARTITION" == "host" ]; then
						PARTITION="shared"
					else
						PARTITION="mdev"
					fi
				fi
			done
			[ "$PARTITION" == "none" ] && PARTITION="host" # If not declared, that's host

			if [[ $PARTITION_INFO_FOUND == 0 ]] ; then
				PopulateDebugLog "Unknown Cache level info: single BD fallback."
				echo "    <cpu arch=\""$ARCH"\" id=\""$DEFAULT_CPU_ID"\" socket_id=\""$CURRENT_SOCKET"\" mem_id=\""$CURRENT_MEMORY_NODE"\">" >> $TARGET_SYS
				PARTITION_INFO_FOUND=1
			fi

			echo "        <pe id=\""$CURRENT_PE"\" core_id=\""$CURRENT_CORE"\" share=\"100\" partition=\""$PARTITION"\"/>" >> $TARGET_SYS
			PopulateDebugLog "Found a Processing Element. ID: $CURRENT_PE, core_id: $CURRENT_CORE, partition: $PARTITION"
			;;
                "Net")
			CURRENT_NETIF=$(echo $lstopo_entry | grep -o "L#[0-9]\{1,\}" | grep -o "[0-9]\{1,\}")
			NETIF_NAME=$(echo $lstopo_entry | grep -o "\"\w*\"" | grep -o "\w*")
			echo "    <netif id=\""$CURRENT_NETIF"\" name=\""$NETIF_NAME"\" />" >> $TMP_FOLDER/xml_netifs
			PopulateDebugLog "Found a NetworkInterFace. ID: $CURRENT_NETIF, name: $NETIF_NAME"
			;;
		*)
			PopulateDebugLog "Unknown Keyword: $KEYWORD"
			;;
	esac

done < $TMP_FOLDER/lstopo_description

XML_GenStorageDevices

XML_WriteTail # Write a part of the XML output on a file

PrintDebugLog

XML_CreateSystems

#XML_PrintOutput # Print the final output
CloseGenerator
