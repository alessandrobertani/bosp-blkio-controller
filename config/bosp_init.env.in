# BOSP Shell: the BarbequeRTRM OpenSource Project Shell

# Load BarbequeRTRM daemon default
source @CONFIG_BOSP_RUNTIME_PATH@/@BBQUE_PATH_DEFAULTS@/bbqued

BOSPSH_SOURCES="@PROJECT_SOURCE_DIR@/.."
RTLIB_BINDINGS_DIR=lib/bbque/bindings


# Define a set of useful console color escapes
# Other colors could be obtained using this syntax:
#          \033[COLOR1;COLOR2m
# where COLOR1 and COLOR2 are Fore/Background:
# Color   Fg Bg
# black   30 40
# red     31 41
# green   32 42
# yellow  33 43
# blue    34 44
# magenta 35 45
# cyan    36 46
# white   37 47

BOSPSH_WHITE="\033[1;37m"
BOSPSH_LGRAY="\033[37m"
BOSPSH_GRAY="\033[1;30m"
BOSPSH_BLACK="\033[30m"
BOSPSH_RED="\033[31m"
BOSPSH_LRED="\033[1;31m"
BOSPSH_GREEN="\033[32m"
BOSPSH_LGREEN="\033[1;32m"
BOSPSH_BROWN="\033[33m"
BOSPSH_YELLOW="\033[1;33m"
BOSPSH_BLUE="\033[34m"
BOSPSH_LBLUE="\033[1;34m"
BOSPSH_PURPLE="\033[35m"
BOSPSH_PINK="\033[1;35m"
BOSPSH_CYAN="\033[36m"
BOSPSH_LCYAN="\033[1;36m"

BOSPSH_RESET="\033[0m"
BOSPSH_DEFAULT=$BOSPSH_RESET


################################################################################
# Generic BOSP Shell commands
################################################################################

# BOSP Shell On-Line HELP
function bosp-help {
clear
echo -ne '\E[37;42m'
echo "                                                                               "
echo "                    .:: BOSP Shell - HELP On-Line ::.                          "
echo "                                                                               "
echo -ne "$BOSPSH_RESET$BOSPSH_WHITE"
cat <<EOF

Almost all BOSP-Shell commands start by "bosp-" or "bbque-", thus using shell
completion it is easy to get a list of all the available commands.
Thereafter is a list of the main ones, with a short description.
For a longer description type "bosp-help <command>"


.:: Generic BOSP Shell commands
--------------------------------

bosp-cleanup - Clean-up all BOSP run-time generated data
bosp-help    - Print this help, or command specific helps
bosp-shell   - Start a new BOSP terminal
bosp-version - Dump info on the BarbequeRTRM in use


.:: Common BOSP Building targets
----------------------------------

bosp-build-clean    - Clean BOSP core components (bbque and rtlib demos)
bosp-build-debug    - Build BOSP in debug mode
bosp-build-release  - Build BOSP in release mode


.:: BarbequeRTRM Management Commands
-------------------------------------

bbque-console - Start a set of BarbequeRTRM monitoring consoles
bbque-log     - Show the Bbque daemon log
bbque-oplb    - Operating points list builder script:
bbque-pid     - Get the PID of the running Bbqued daemon
bbque-plot    - Plot the specified Index data file
bbque-plp     - BarbequeRTRM Platform Layouts (*.bpl) parser
bbque-start   - Start a foreground BarbequeRTRM session
bbque-startd  - Start the BarbequeRTRM daemon
bbque-stats   - Dump BarbequeRTRM daemon statistics
bbque-stest   - Stress test the BarbequeRTRM dameon
bbque-stopd   - Stop the BarbequeRTRM daemon


.:: BarbequeRTRM Processes Management
-------------------------------------
bbque-proc-manage   - Add a program (binary name) to the set of managed processes
bbque-proc-unmanage - Remove a program (binary name) to the set of managed processes
bbque-proc-setsched - Set a resource requests for a managed process


.:: BarbequeRTRM Reliability support
-------------------------------------

bbque-checkpoint - Perform the checkpoint of a currently running managed application
bbque-restore    - Restore a previously running application from a given checkpoint dump
bbque-freeze     - Freeze a currently running managed application
bbque-thaw       - Thaw a previously frozen managed application


.:: Test Applications
----------------------

bbque-stest          - a random workload BarbequeRTRM stress test
bbque-testapp        - a generic BarbequeRTRM test application
bbque-java-testapp   - a generic BarbequeRTRM Java test application
bbque-tutorial-aem   - a tutorial on RTLib AEM API
bbque-tutorial-plain - a tutorial on RTLib Plain API

EOF
}

function bosp-version {
echo -ne "$BOSPSH_GREEN"
cat <<EOF
.:: BarbequeRTRM:
- Version.................... @GIT_SHA1@
- Build type................. @CMAKE_BUILD_TYPE@
- Build configuration:
     RPC FIFOs............... @CONFIG_BBQUE_RPC_FIFO@
     Emulated Host........... @CONFIG_TARGET_EMULATED_HOST@
     Performance Counters.... @CONFIG_BBQUE_RTLIB_PERF_SUPPORT@
EOF
echo -ne "$BOSPSH_DEFAULT"
}

function bosp-cleanup {
# Wipe BOSP run-time data
rm -rf $SYSROOT/@BBQUE_PATH_VAR@/*
}

# - XWindows geometries recoveder using "xwininfo" utility
# - Font is configured by "-fn" option, to see a list of fonts run:
#     "xlsfonts | less"
FONT=-misc-fixed-medium-r-normal--10-100-75-75-c-60-iso10646-1
function bosp-shell {
	aterm +sb -fn $FONT -geometry 118x37+711+240 -title "BBQUE Shell"  \
			-e /bin/bash --init-file $SYSROOT/etc/bbque/bosp_init.env \
			&>/dev/null &
}

################################################################################
# Common BOSP Building targets
################################################################################

function bosp-build-clean {
echo -ne "${BOSPSH_BLUE}"
echo -e "*** Cleaning up BOSP (core components)"
echo -ne "$BOSPSH_DEFAULT"
make clean_bbque clean_rtlib_testapp clean_rtlib_tutorials
}

function bosp-build-release {
echo -ne "${BOSPSH_BLUE}"
echo -e "*** Rebuilding [Release] BOSP"
echo -ne "$BOSPSH_DEFAULT"
make BUILD_TYPE="Release" bbque
}

function bosp-build-debug {
echo -ne "${BOSPSH_BLUE}"
echo -e "*** Rebuilding [Debug] BOSP (with TPD support)"
echo -ne "$BOSPSH_DEFAULT"
make BUILD_TYPE="Debug" bbque
}

################################################################################
# BarbequeRTRM Management Commands
################################################################################

function bbque-pid {
if [ ! -f $PIDFILE ]; then
	echo -ne "\nBarbequeRTRM daemon NOT running\n\n"
	return 1
fi
cat $PIDFILE
}

function bbque-stats {
if [ ! -f $PIDFILE ]; then
	echo -ne "\nBarbequeRTRM daemon NOT running\n\n"
	return 1
fi
BOSPSH_BBQUE_PID=`bbque-pid`
echo "Getting stats of Bbqued [$BOSPSH_BBQUE_PID]..."
sudo kill -USR1 $BOSPSH_BBQUE_PID
sudo kill -USR2 $BOSPSH_BBQUE_PID
}

function bbque-startd {
if [ ! -f $PIDFILE ]; then
	bosp-cleanup
fi
if [ $# -ge 2 ]; then
	sudo BBQUE_CONF=$2 $SYSROOT/etc/init.d/bbqued start $1
else
	sudo $SYSROOT/etc/init.d/bbqued start $1
fi
}

function bbque-stopd {
	sudo $SYSROOT/etc/init.d/bbqued stop
}

function bbque-start {
	bosp-cleanup
	if [ $# -ge 1 ]; then
		sudo $BIN -c $1
	else
		sudo $BIN
	fi
}

function bbque-console-stop {
	[ -f $SYSROOT/var/bbque/bbque-console.pids ] && \
		kill -TERM `cat $SYSROOT/var/bbque/bbque-console.pids`
}

function bbque-log {
	LOG="${1:-$LOGFILE}"
	echo "Opening BarbequeRTRM logfile [$LOG]..."
	if [ -n "$DISPLAY" ]; then
		aterm +sb -fn $FONT -geometry 140x56+-9-17 -title "BarbequeRTRM Log [$LOG]" \
		-e tail -n+1 -f $LOG \
		&>/dev/null &
	else
		echo "Fallback to text mode."
		cat $LOG | less -R
	fi
}

function bbque-log-clear {
	echo "Erasing logfile [$LOG]..."
	LOG="${1:-$LOGFILE}"
	sudo rm -f $LOG
}

function bbque-plot {
echo "Plotting DAT file [$1]..."
GTIT=${2:-"Plot of `basename $1`"}
YLAB=${3:-"<Some Y-Label>"}
OEPS=${4:-""}

if [ "x$OEPS" == "x" ]; then
		OCMD="--geometry 640x195+0+0"
		echo "Dumping graph on screen..."
else
		OCMD="--hardcopy $OEPS"
		echo "Dumping EPS to file [$OEPS]..."
fi

cat $1 | $SYSROOT/bin/feedgnuplot \
		--lines --points \
		--nodomain --dataid \
		--xlabel "Scheduling Events" \
		--ylabel "$YLAB" \
		--title "$GTIT" \
		--autolegend \
		--xmax 40 \
		--ymin 0 --ymax 12 \
		--extracmds "set border linewidth 1" \
		--extracmds "set key left spacing 0.8" \
		$OCMD
}

function bbque-cmd {
	echo "Sending command [$*]..."
	echo "$*" > @CONFIG_BOSP_RUNTIME_RWPATH@/bbque_cmds
}

################################################################################
# BarbequeRTRM Process management support
################################################################################

function bbque-proc-manage {
	[ $# -lt 1 ] && echo "${FUNCNAME[0]} <name>" && return 1
	echo "Adding program $1 to managed processes..."
	bbque-cmd bq.prm.add $1
}

function bbque-proc-unmanage {
	[ $# -lt 1 ] && echo "${FUNCNAME[0]} <name>" && return 1
	echo "Remove program $1 from managed processes..."
	bbque-cmd bq.prm.remove $1
}

function bbque-proc-setsched {
	[ $# -lt 2 ] && echo "${FUNCNAME[0]} <pid> -n <process_name> [-p <pid>] -c <cpu_cores> " \
	               "[-a <accelerator_cores>] [-m <memory_MB>] " && return 1
	echo "Resource allocation request for managed process: $*..."
	bbque-cmd bq.prm.setsched $*
}


################################################################################
# BarbequeRTRM Reliability support
################################################################################

function bbque-checkpoint {
	[ $# -lt 1 ] && echo "${FUNCNAME[0]} <pid>" && return 1
	echo "Checkpoint request for process pid=$1..."
	bbque-cmd bq.lm.checkpoint $1
}

function bbque-restore {
	[ $# -lt 2 ] && echo "${FUNCNAME[0]} <pid> <program-name>" && return 1
	echo "Restore request for process pid=$1 [img=$2]..."
	bbque-cmd bq.lm.restore $1 $2
}

function bbque-freeze {
	[ $# -lt 1 ] && echo "${FUNCNAME[0]} <pid>" && return 1
	echo "Freeze request for process pid=$1..."
	bbque-cmd bq.lm.freeze $1
}

function bbque-thaw {
	[ $# -lt 1 ] && echo "${FUNCNAME[0]} <pid>" && return 1
	echo "Thaw request for process pid=$1..."
	bbque-cmd bq.lm.thaw $1
}

function bbque-run {
	[ $# -lt 1 ] && echo "${FUNCNAME[0]} <path>" && return 1
	echo "Launching background process $*"
	[ $# -ge 1 ] && setsid $* < /dev/null &> /dev/null &
}


################################################################################
# Applications shortcuts
################################################################################

function bbque-java-testapp {
        echo "Starting RTLib Java Testapp"
        DYN_LIBRARY_FLAGS="-Djava.library.path=$SYSROOT/$RTLIB_BINDINGS_DIR/java -Dfile.encoding=UTF-8"
        CLASSPATH_FLAGS="-classpath $SYSROOT/usr/bin:$SYSROOT/$RTLIB_BINDINGS_DIR/java/RTLibJavaSdk.jar"
        JAVA_FLAGS="$DYN_LIBRARY_FLAGS $CLASSPATH_FLAGS"
        java $JAVA_FLAGS RTLibTestEXC
}

function 2parma-demo2 {
TRG="${1:-Numa}"
echo "Starting 2PARMA Demo2, Target [$TRG]..."
aterm +sb -fn $FONT -geometry 125x30+705-17 \
		-title "BBQUE v0.8 (Betty Bacon) - 2PARMA Demo2 [Target $TRG]" \
		-e bbque-2parma-demo2 $TRG \
		&>/dev/null &
}

function 2parma-demo3 {
TRG="${1:-Numa}"
echo "Starting 2PARMA Demo3, Target [$TRG]..."
aterm +sb -fn $FONT -geometry 125x30+705-17 \
		-title "BBQUE v0.8 (Betty Bacon) - 2PARMA Demo3 [Target $TRG]" \
		-e bbque-2parma-demo3 $TRG \
		&>/dev/null &
}

################################################################################
# PARSEC (v2.1) Benchmarks Commands
################################################################################

BOSPSH_PSEC21_SRCS=$BOSPSH_SOURCES/benchmarks/parsec-2.1/pkgs/apps
BOSPSH_PSEC21_BINS=$SYSROOT/usr/bin/parsec

# Bodytrack
BOSPSH_PSEC21_BTRACK_BIN=$BOSPSH_PSEC21_BINS/bodytrack
BOSPSH_PSEC21_BTRACK_DATA=$BOSPSH_PSEC21_SRCS/bodytrack/inputs

function bosp-parsec21-bodytrack {
$BOSPSH_PSEC21_BTRACK_BIN $BOSPSH_PSEC21_BTRACK_DATA/sequenceB_261 4 260 4000 5 2 4
}

# Ferret
BOSPSH_PSEC21_FERRET_BIN=$BOSPSH_PSEC21_BINS/ferret
BOSPSH_PSEC21_FERRET_DATA=$BOSPSH_PSEC21_SRCS/ferret/inputs

function bosp-parsec21-ferret {
$BOSPSH_PSEC21_FERRET_BIN \
	$BOSPSH_PSEC21_FERRET_DATA/corel \
	lsh  \
	$BOSPSH_PSEC21_FERRET_DATA/queries \
	10 10 4 $SYSROOT/var/bbque/ferret.log
}



################################################################################
# BOSP Shell MAIN
################################################################################

# Setup Shell variables
PATH=$SYSROOT/sbin:$SYSROOT/bin:$SYSROOT/usr/bin:$PATH
PS1="\[${BOSPSH_LRED}\][BOSPShell \[${BOSPSH_YELLOW}\]\W\[${BOSPSH_LRED}\]] \> \[${BOSPSH_DEFAULT}\]"
export BOSP_SYSROOT=$SYSROOT

# Dump out a nice BOSP Shell logo
clear
echo -e '\E[37;41m'

echo "                                                                               "
echo "                            .:: BOSP Shell ::.                                 "
echo "                                                                               "
echo -ne "$BOSPSH_RESET$BOSPSH_LGRAY"
cat <<EOF

Welcome to BarbequeRTRM OpenSource Project SHELL!

Type "bosp-help" for on-line help on available commands

EOF

# Setup default SHELL text color
echo -e "$BOSPSH_DEFAULT"

#
# vim: set tabstop=4:
